import sapien.core.pysapien.renderer
import typing
import numpy
_Shape = typing.Tuple[int, ...]

__all__ = [
    "Context",
    "Material",
    "Mesh",
    "Model",
    "Node",
    "Object",
    "Scene",
    "Shape",
    "Texture",
    "UIButton",
    "UICheckbox",
    "UIDisplayText",
    "UIInputFloat",
    "UIInputFloat2",
    "UIInputFloat3",
    "UIInputFloat4",
    "UIInputText",
    "UIRadioButtonGroup",
    "UISection",
    "UISliderAngle",
    "UISliderFloat",
    "UIWidget",
    "UIWindow"
]


class Context():
    def __init__(self, max_num_materials: int = 5000, max_num_textures: int = 5000, default_mipmap_levels: int = 1) -> None: ...
    def create_box_mesh(self) -> Mesh: ...
    def create_capsule_mesh(self, radius: float, half_length: float, segments: int = 32, half_rings: int = 8) -> Mesh: ...
    def create_cone_mesh(self, segments: int = 32) -> Mesh: ...
    def create_material(self, base_colorf: numpy.ndarray[numpy.float32], specular: float, roughness: float, metallic: float) -> Material: ...
    def create_model(self, meshes: typing.List[Mesh], materials: typing.List[Material]) -> Model: ...
    def create_model_from_file(self, filename: str) -> None: ...
    def create_texture_from_file(self, filename: str, mipmap_levels: int, filter: str = 'linear', address_mode: str = 'repeat') -> Texture: ...
    def create_uvsphere_mesh(self, segments: int = 32, half_rings: int = 16) -> Mesh: ...
    pass
class Material():
    def set_base_color(self, rgba: numpy.ndarray[numpy.float32]) -> None: ...
    def set_metallic(self, metallic: float) -> None: ...
    def set_roughness(self, roughness: float) -> None: ...
    def set_specular(self, specular: float) -> None: ...
    pass
class Mesh():
    pass
class Model():
    pass
class Node():
    def set_position(self, position: numpy.ndarray[numpy.float32]) -> None: ...
    def set_rotation(self, quat: numpy.ndarray[numpy.float32]) -> None: ...
    def set_scale(self, scale: numpy.ndarray[numpy.float32]) -> None: ...
    pass
class Object(Node):
    @property
    def shading_mode(self) -> int:
        """
        :type: int
        """
    @shading_mode.setter
    def shading_mode(self, arg1: int) -> None:
        pass
    @property
    def transparency(self) -> float:
        """
        :type: float
        """
    @transparency.setter
    def transparency(self) -> None:
        pass
    pass
class Scene():
    def add_node(self, parent: Node = None) -> Node: ...
    def add_object(self, model: Model, parent: Node = None) -> Object: ...
    def remove_node(self, node: Node) -> None: ...
    pass
class Shape():
    pass
class Texture():
    pass
class UIWidget():
    def remove(self) -> None: ...
    pass
class UICheckbox(UIWidget):
    def Callback(self, func: typing.Callable[[UICheckbox], None]) -> UICheckbox: ...
    def Checked(self, checked: bool) -> UICheckbox: ...
    def Label(self, label: str) -> UICheckbox: ...
    def __init__(self) -> None: ...
    @property
    def checked(self) -> bool:
        """
        :type: bool
        """
    pass
class UIDisplayText(UIWidget):
    def Text(self, text: str) -> UIDisplayText: ...
    def __init__(self) -> None: ...
    pass
class UIInputFloat(UIWidget):
    def Label(self, label: str) -> UIInputFloat: ...
    def Value(self, value: float) -> UIInputFloat: ...
    def __init__(self) -> None: ...
    def get(self) -> float: ...
    pass
class UIInputFloat2(UIWidget):
    def Label(self, label: str) -> UIInputFloat2: ...
    def Value(self, value: numpy.ndarray[numpy.float32]) -> UIInputFloat: ...
    def __init__(self) -> None: ...
    def get(self) -> numpy.ndarray[numpy.float32]: ...
    pass
class UIInputFloat3(UIWidget):
    def Label(self, label: str) -> UIInputFloat3: ...
    def Value(self, value: numpy.ndarray[numpy.float32]) -> UIInputFloat: ...
    def __init__(self) -> None: ...
    def get(self) -> numpy.ndarray[numpy.float32]: ...
    pass
class UIInputFloat4(UIWidget):
    def Label(self, label: str) -> UIInputFloat4: ...
    def Value(self, value: numpy.ndarray[numpy.float32]) -> UIInputFloat: ...
    def __init__(self) -> None: ...
    def get(self) -> numpy.ndarray[numpy.float32]: ...
    pass
class UIInputText(UIWidget):
    def Label(self, label: str) -> UIInputText: ...
    def Size(self, size: int) -> UIInputText: ...
    def __init__(self) -> None: ...
    pass
class UIRadioButtonGroup(UIWidget):
    def Callback(self, func: typing.Callable[[UIRadioButtonGroup], None]) -> UIRadioButtonGroup: ...
    def Index(self, index: int) -> UIRadioButtonGroup: ...
    def Labels(self, labels: typing.List[str]) -> UIRadioButtonGroup: ...
    def __init__(self) -> None: ...
    @property
    def index(self) -> int:
        """
        :type: int
        """
    @property
    def value(self) -> str:
        """
        :type: str
        """
    pass
class UISection(UIWidget):
    def Expanded(self, expanded: bool) -> UISection: ...
    def Label(self, label: str) -> UISection: ...
    def __init__(self) -> None: ...
    def append(self, *args) -> UISection: ...
    pass
class UISliderAngle(UIWidget):
    def Callback(self, func: typing.Callable[[UISliderAngle], None]) -> UISliderAngle: ...
    def Label(self, label: str) -> UISliderAngle: ...
    def Max(self, max: float) -> UISliderAngle: ...
    def Min(self, min: float) -> UISliderAngle: ...
    def Value(self, value: float) -> UISliderAngle: ...
    def __init__(self) -> None: ...
    def get(self) -> float: ...
    pass
class UISliderFloat(UIWidget):
    def Callback(self, func: typing.Callable[[UISliderFloat], None]) -> UISliderFloat: ...
    def Label(self, label: str) -> UISliderFloat: ...
    def Max(self, max: float) -> UISliderFloat: ...
    def Min(self, min: float) -> UISliderFloat: ...
    def Value(self, value: float) -> UISliderFloat: ...
    def __init__(self) -> None: ...
    def get(self) -> float: ...
    pass
class UIButton(UIWidget):
    def Callback(self, func: typing.Callable[[UIButton], None]) -> UIButton: ...
    def Label(self, label: str) -> UIButton: ...
    def __init__(self) -> None: ...
    pass
class UIWindow(UIWidget):
    def Label(self, label: str) -> UIWindow: ...
    def Pos(self, x: float, y: float) -> UIWindow: ...
    def Size(self, x: float, y: float) -> UIWindow: ...
    def __init__(self) -> None: ...
    def append(self, *args) -> UIWindow: ...
    pass
