// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: render_server.proto
#ifndef GRPC_render_5fserver_2eproto__INCLUDED
#define GRPC_render_5fserver_2eproto__INCLUDED

#include "render_server.pb.h"

#include <functional>
#include <grpc/impl/codegen/port_platform.h>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace sapien {
namespace Renderer {
namespace server {
namespace proto {

class RenderService final {
 public:
  static constexpr char const* service_full_name() {
    return "sapien.Renderer.server.proto.RenderService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // ========== Renderer ==========//
    virtual ::grpc::Status CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::sapien::Renderer::server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> AsyncCreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(AsyncCreateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> PrepareAsyncCreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncCreateSceneRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncRemoveSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncRemoveSceneRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::sapien::Renderer::server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> AsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(AsyncCreateMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> PrepareAsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncCreateMaterialRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncRemoveMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncRemoveMaterialRaw(context, request, cq));
    }
    // ========== Scene ==========//
    virtual ::grpc::Status AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::sapien::Renderer::server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> AsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(AsyncAddBodyMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddBodyMeshRaw(context, request, cq));
    }
    virtual ::grpc::Status AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::sapien::Renderer::server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> AsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(AsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    virtual ::grpc::Status RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncRemoveBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncRemoveBodyRaw(context, request, cq));
    }
    virtual ::grpc::Status AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::sapien::Renderer::server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> AsyncAddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(AsyncAddCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddCameraRaw(context, request, cq));
    }
    virtual ::grpc::Status SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetAmbientLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetAmbientLightRaw(context, request, cq));
    }
    virtual ::grpc::Status AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::sapien::Renderer::server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> AsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(AsyncAddPointLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddPointLightRaw(context, request, cq));
    }
    virtual ::grpc::Status AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::sapien::Renderer::server::proto::Id* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> AsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(AsyncAddDirectionalLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddDirectionalLightRaw(context, request, cq));
    }
    virtual ::grpc::Status SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetEntityOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetEntityOrderRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncUpdateRenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncUpdateRenderRaw(context, request, cq));
    }
    // ========== Material ==========//
    virtual ::grpc::Status SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetBaseColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetBaseColorRaw(context, request, cq));
    }
    virtual ::grpc::Status SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetRoughnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetRoughnessRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetSpecularRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetSpecularRaw(context, request, cq));
    }
    virtual ::grpc::Status SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetMetallicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetMetallicRaw(context, request, cq));
    }
    // ========== Body ==========//
    virtual ::grpc::Status SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetUniqueIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetUniqueIdRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetSegmentationIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetSegmentationIdRaw(context, request, cq));
    }
    // ========== Camera ==========//
    virtual ::grpc::Status TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncTakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncTakePictureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncTakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncTakePictureRaw(context, request, cq));
    }
    virtual ::grpc::Status SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::sapien::Renderer::server::proto::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> AsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(AsyncSetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetCameraParametersRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // ========== Renderer ==========//
      virtual void CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void CreateMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // ========== Scene ==========//
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddBodyMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddBodyPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RemoveBody(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void RemoveBody(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void RemoveBody(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetAmbientLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddPointLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddPointLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddPointLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void AddDirectionalLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetEntityOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateRender(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void UpdateRender(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void UpdateRender(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // ========== Material ==========//
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetBaseColor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetRoughness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetRoughness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetRoughness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSpecular(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSpecular(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSpecular(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMetallic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetMetallic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetMetallic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // ========== Body ==========//
      virtual void SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetUniqueId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetUniqueId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetUniqueId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSegmentationId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetSegmentationId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetSegmentationId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      // ========== Camera ==========//
      virtual void TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TakePicture(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void TakePicture(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void TakePicture(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) = 0;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      #else
      virtual void SetCameraParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      #endif
    };
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    typedef class experimental_async_interface async_interface;
    #endif
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    async_interface* async() { return experimental_async(); }
    #endif
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* AsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* PrepareAsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* AsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* AsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* AsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* AsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* AsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetUniqueIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetUniqueIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetSegmentationIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetSegmentationIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* AsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::sapien::Renderer::server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> AsyncCreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(AsyncCreateSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> PrepareAsyncCreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncCreateSceneRaw(context, request, cq));
    }
    ::grpc::Status RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncRemoveSceneRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncRemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncRemoveSceneRaw(context, request, cq));
    }
    ::grpc::Status CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::sapien::Renderer::server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> AsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(AsyncCreateMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> PrepareAsyncCreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncCreateMaterialRaw(context, request, cq));
    }
    ::grpc::Status RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncRemoveMaterialRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncRemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncRemoveMaterialRaw(context, request, cq));
    }
    ::grpc::Status AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::sapien::Renderer::server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> AsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(AsyncAddBodyMeshRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddBodyMeshRaw(context, request, cq));
    }
    ::grpc::Status AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::sapien::Renderer::server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> AsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(AsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddBodyPrimitiveRaw(context, request, cq));
    }
    ::grpc::Status RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncRemoveBodyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncRemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncRemoveBodyRaw(context, request, cq));
    }
    ::grpc::Status AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::sapien::Renderer::server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> AsyncAddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(AsyncAddCameraRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddCameraRaw(context, request, cq));
    }
    ::grpc::Status SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetAmbientLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetAmbientLightRaw(context, request, cq));
    }
    ::grpc::Status AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::sapien::Renderer::server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> AsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(AsyncAddPointLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddPointLightRaw(context, request, cq));
    }
    ::grpc::Status AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::sapien::Renderer::server::proto::Id* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> AsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(AsyncAddDirectionalLightRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>> PrepareAsyncAddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>>(PrepareAsyncAddDirectionalLightRaw(context, request, cq));
    }
    ::grpc::Status SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetEntityOrderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetEntityOrderRaw(context, request, cq));
    }
    ::grpc::Status UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncUpdateRenderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncUpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncUpdateRenderRaw(context, request, cq));
    }
    ::grpc::Status SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetBaseColorRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetBaseColorRaw(context, request, cq));
    }
    ::grpc::Status SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetRoughnessRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetRoughnessRaw(context, request, cq));
    }
    ::grpc::Status SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetSpecularRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetSpecularRaw(context, request, cq));
    }
    ::grpc::Status SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetMetallicRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetMetallicRaw(context, request, cq));
    }
    ::grpc::Status SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetUniqueIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetUniqueIdRaw(context, request, cq));
    }
    ::grpc::Status SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetSegmentationIdRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetSegmentationIdRaw(context, request, cq));
    }
    ::grpc::Status TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncTakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncTakePictureRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncTakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncTakePictureRaw(context, request, cq));
    }
    ::grpc::Status SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::sapien::Renderer::server::proto::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> AsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(AsyncSetCameraParametersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>> PrepareAsyncSetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>>(PrepareAsyncSetCameraParametersRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void CreateScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveScene(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveScene(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void CreateMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void CreateMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void CreateMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveMaterial(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveMaterial(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddBodyMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddBodyMesh(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddBodyMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddBodyMesh(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddBodyPrimitive(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void RemoveBody(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveBody(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void RemoveBody(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void RemoveBody(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddCamera(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddCamera(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetAmbientLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetAmbientLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetAmbientLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetAmbientLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddPointLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddPointLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddPointLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddPointLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      void AddDirectionalLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddDirectionalLight(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void AddDirectionalLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void AddDirectionalLight(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Id* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetEntityOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetEntityOrder(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetEntityOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetEntityOrder(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void UpdateRender(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateRender(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void UpdateRender(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void UpdateRender(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetBaseColor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetBaseColor(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetBaseColor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetBaseColor(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetRoughness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRoughness(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetRoughness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetRoughness(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetSpecular(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSpecular(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSpecular(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSpecular(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetMetallic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetMetallic(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetMetallic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetMetallic(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetUniqueId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetUniqueId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetUniqueId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetUniqueId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetSegmentationId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSegmentationId(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetSegmentationId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetSegmentationId(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void TakePicture(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TakePicture(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void TakePicture(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void TakePicture(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      void SetCameraParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, std::function<void(::grpc::Status)>) override;
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetCameraParameters(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
      #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      void SetCameraParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      #else
      void SetCameraParameters(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::sapien::Renderer::server::proto::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      #endif
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* AsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* PrepareAsyncCreateSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Index& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncRemoveSceneRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* AsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* PrepareAsyncCreateMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncRemoveMaterialRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::Id& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* AsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddBodyMeshRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* AsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddBodyPrimitiveRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncRemoveBodyRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* AsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddCameraRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddCameraReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetAmbientLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec3& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* AsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddPointLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* AsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Id>* PrepareAsyncAddDirectionalLightRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetEntityOrderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncUpdateRenderRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetBaseColorRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdVec4& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetRoughnessRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetSpecularRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetMetallicRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::IdFloat& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetUniqueIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetUniqueIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetSegmentationIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetSegmentationIdRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::BodyIdReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncTakePictureRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::TakePictureReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* AsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::sapien::Renderer::server::proto::Empty>* PrepareAsyncSetCameraParametersRaw(::grpc::ClientContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateScene_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveScene_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveMaterial_;
    const ::grpc::internal::RpcMethod rpcmethod_AddBodyMesh_;
    const ::grpc::internal::RpcMethod rpcmethod_AddBodyPrimitive_;
    const ::grpc::internal::RpcMethod rpcmethod_RemoveBody_;
    const ::grpc::internal::RpcMethod rpcmethod_AddCamera_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAmbientLight_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPointLight_;
    const ::grpc::internal::RpcMethod rpcmethod_AddDirectionalLight_;
    const ::grpc::internal::RpcMethod rpcmethod_SetEntityOrder_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateRender_;
    const ::grpc::internal::RpcMethod rpcmethod_SetBaseColor_;
    const ::grpc::internal::RpcMethod rpcmethod_SetRoughness_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSpecular_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMetallic_;
    const ::grpc::internal::RpcMethod rpcmethod_SetUniqueId_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSegmentationId_;
    const ::grpc::internal::RpcMethod rpcmethod_TakePicture_;
    const ::grpc::internal::RpcMethod rpcmethod_SetCameraParameters_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // ========== Renderer ==========//
    virtual ::grpc::Status CreateScene(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response);
    virtual ::grpc::Status RemoveScene(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status CreateMaterial(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response);
    virtual ::grpc::Status RemoveMaterial(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response);
    // ========== Scene ==========//
    virtual ::grpc::Status AddBodyMesh(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response);
    virtual ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response);
    virtual ::grpc::Status RemoveBody(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status AddCamera(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response);
    virtual ::grpc::Status SetAmbientLight(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status AddPointLight(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response);
    virtual ::grpc::Status AddDirectionalLight(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response);
    virtual ::grpc::Status SetEntityOrder(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status UpdateRender(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response);
    // ========== Material ==========//
    virtual ::grpc::Status SetBaseColor(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status SetRoughness(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status SetSpecular(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status SetMetallic(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response);
    // ========== Body ==========//
    virtual ::grpc::Status SetUniqueId(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status SetSegmentationId(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response);
    // ========== Camera ==========//
    virtual ::grpc::Status TakePicture(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response);
    virtual ::grpc::Status SetCameraParameters(::grpc::ServerContext* context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateScene() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScene(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::Index* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveScene() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveScene(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::Id* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMaterial(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::Empty* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveMaterial(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::Id* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyMesh(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyPrimitive(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RemoveBody() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveBody(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddCamera() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCamera(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::AddCameraReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAmbientLight(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::IdVec3* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddPointLight() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPointLight(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::AddPointLightReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDirectionalLight(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Id>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEntityOrder(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::EntityOrderReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateRender() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRender(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBaseColor(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::IdVec4* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetRoughness() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRoughness(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::IdFloat* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSpecular() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSpecular(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::IdFloat* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMetallic() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMetallic(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::IdFloat* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUniqueId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetUniqueId() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_SetUniqueId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUniqueId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUniqueId(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::BodyIdReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSegmentationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSegmentationId() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_SetSegmentationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSegmentationId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSegmentationId(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::BodyIdReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TakePicture() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakePicture(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::TakePictureReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraParameters(::grpc::ServerContext* context, ::sapien::Renderer::server::proto::CameraParamsReq* request, ::grpc::ServerAsyncResponseWriter< ::sapien::Renderer::server::proto::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateScene<WithAsyncMethod_RemoveScene<WithAsyncMethod_CreateMaterial<WithAsyncMethod_RemoveMaterial<WithAsyncMethod_AddBodyMesh<WithAsyncMethod_AddBodyPrimitive<WithAsyncMethod_RemoveBody<WithAsyncMethod_AddCamera<WithAsyncMethod_SetAmbientLight<WithAsyncMethod_AddPointLight<WithAsyncMethod_AddDirectionalLight<WithAsyncMethod_SetEntityOrder<WithAsyncMethod_UpdateRender<WithAsyncMethod_SetBaseColor<WithAsyncMethod_SetRoughness<WithAsyncMethod_SetSpecular<WithAsyncMethod_SetMetallic<WithAsyncMethod_SetUniqueId<WithAsyncMethod_SetSegmentationId<WithAsyncMethod_TakePicture<WithAsyncMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Index, ::sapien::Renderer::server::proto::Id>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::Index* request, ::sapien::Renderer::server::proto::Id* response) { return this->CreateScene(context, request, response); }));}
    void SetMessageAllocatorFor_CreateScene(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::Index, ::sapien::Renderer::server::proto::Id>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(0);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Index, ::sapien::Renderer::server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response) { return this->RemoveScene(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveScene(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(1);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveScene(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_CreateMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Empty, ::sapien::Renderer::server::proto::Id>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::Empty* request, ::sapien::Renderer::server::proto::Id* response) { return this->CreateMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_CreateMaterial(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::Empty, ::sapien::Renderer::server::proto::Id>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(2);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Empty, ::sapien::Renderer::server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::Id* request, ::sapien::Renderer::server::proto::Empty* response) { return this->RemoveMaterial(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveMaterial(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(3);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddBodyMesh() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddBodyMeshReq, ::sapien::Renderer::server::proto::Id>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::AddBodyMeshReq* request, ::sapien::Renderer::server::proto::Id* response) { return this->AddBodyMesh(context, request, response); }));}
    void SetMessageAllocatorFor_AddBodyMesh(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::AddBodyMeshReq, ::sapien::Renderer::server::proto::Id>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(4);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddBodyMeshReq, ::sapien::Renderer::server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddBodyMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddBodyMesh(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddBodyPrimitive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddBodyPrimitiveReq, ::sapien::Renderer::server::proto::Id>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* request, ::sapien::Renderer::server::proto::Id* response) { return this->AddBodyPrimitive(context, request, response); }));}
    void SetMessageAllocatorFor_AddBodyPrimitive(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::AddBodyPrimitiveReq, ::sapien::Renderer::server::proto::Id>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(5);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddBodyPrimitiveReq, ::sapien::Renderer::server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddBodyPrimitive(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddBodyPrimitive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_RemoveBody() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::RemoveBodyReq, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::RemoveBodyReq* request, ::sapien::Renderer::server::proto::Empty* response) { return this->RemoveBody(context, request, response); }));}
    void SetMessageAllocatorFor_RemoveBody(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::RemoveBodyReq, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(6);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::RemoveBodyReq, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveBody(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveBody(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddCamera() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddCameraReq, ::sapien::Renderer::server::proto::Id>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::AddCameraReq* request, ::sapien::Renderer::server::proto::Id* response) { return this->AddCamera(context, request, response); }));}
    void SetMessageAllocatorFor_AddCamera(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::AddCameraReq, ::sapien::Renderer::server::proto::Id>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(7);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddCameraReq, ::sapien::Renderer::server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddCamera(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetAmbientLight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdVec3, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::IdVec3* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetAmbientLight(context, request, response); }));}
    void SetMessageAllocatorFor_SetAmbientLight(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::IdVec3, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(8);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdVec3, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAmbientLight(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAmbientLight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddPointLight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddPointLightReq, ::sapien::Renderer::server::proto::Id>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::AddPointLightReq* request, ::sapien::Renderer::server::proto::Id* response) { return this->AddPointLight(context, request, response); }));}
    void SetMessageAllocatorFor_AddPointLight(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::AddPointLightReq, ::sapien::Renderer::server::proto::Id>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(9);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddPointLightReq, ::sapien::Renderer::server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddPointLight(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddPointLight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_AddDirectionalLight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddDirectionalLightReq, ::sapien::Renderer::server::proto::Id>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* request, ::sapien::Renderer::server::proto::Id* response) { return this->AddDirectionalLight(context, request, response); }));}
    void SetMessageAllocatorFor_AddDirectionalLight(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::AddDirectionalLightReq, ::sapien::Renderer::server::proto::Id>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(10);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::AddDirectionalLightReq, ::sapien::Renderer::server::proto::Id>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddDirectionalLight(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddDirectionalLight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetEntityOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::EntityOrderReq, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::EntityOrderReq* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetEntityOrder(context, request, response); }));}
    void SetMessageAllocatorFor_SetEntityOrder(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::EntityOrderReq, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(11);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::EntityOrderReq, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetEntityOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetEntityOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_UpdateRender() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::UpdateRenderReq, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::UpdateRenderReq* request, ::sapien::Renderer::server::proto::Empty* response) { return this->UpdateRender(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateRender(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::UpdateRenderReq, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(12);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::UpdateRenderReq, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateRender(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateRender(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetBaseColor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdVec4, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::IdVec4* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetBaseColor(context, request, response); }));}
    void SetMessageAllocatorFor_SetBaseColor(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::IdVec4, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(13);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdVec4, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBaseColor(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBaseColor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetRoughness() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetRoughness(context, request, response); }));}
    void SetMessageAllocatorFor_SetRoughness(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(14);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRoughness(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRoughness(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetSpecular() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetSpecular(context, request, response); }));}
    void SetMessageAllocatorFor_SetSpecular(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(15);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSpecular(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSpecular(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetMetallic() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::IdFloat* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetMetallic(context, request, response); }));}
    void SetMessageAllocatorFor_SetMetallic(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(16);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetMetallic(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetMetallic(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetUniqueId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetUniqueId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetUniqueId(context, request, response); }));}
    void SetMessageAllocatorFor_SetUniqueId(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(17);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetUniqueId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUniqueId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetUniqueId(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetUniqueId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetSegmentationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetSegmentationId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::BodyIdReq* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetSegmentationId(context, request, response); }));}
    void SetMessageAllocatorFor_SetSegmentationId(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(18);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetSegmentationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSegmentationId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSegmentationId(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSegmentationId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_TakePicture() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::TakePictureReq, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::TakePictureReq* request, ::sapien::Renderer::server::proto::Empty* response) { return this->TakePicture(context, request, response); }));}
    void SetMessageAllocatorFor_TakePicture(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::TakePictureReq, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(19);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::TakePictureReq, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TakePicture(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TakePicture(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithCallbackMethod_SetCameraParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::CameraParamsReq, ::sapien::Renderer::server::proto::Empty>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::sapien::Renderer::server::proto::CameraParamsReq* request, ::sapien::Renderer::server::proto::Empty* response) { return this->SetCameraParameters(context, request, response); }));}
    void SetMessageAllocatorFor_SetCameraParameters(
        ::grpc::experimental::MessageAllocator< ::sapien::Renderer::server::proto::CameraParamsReq, ::sapien::Renderer::server::proto::Empty>* allocator) {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
    #else
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::experimental().GetHandler(20);
    #endif
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::sapien::Renderer::server::proto::CameraParamsReq, ::sapien::Renderer::server::proto::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetCameraParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/)
    #endif
      { return nullptr; }
  };
  #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
  typedef ExperimentalWithCallbackMethod_CreateScene<ExperimentalWithCallbackMethod_RemoveScene<ExperimentalWithCallbackMethod_CreateMaterial<ExperimentalWithCallbackMethod_RemoveMaterial<ExperimentalWithCallbackMethod_AddBodyMesh<ExperimentalWithCallbackMethod_AddBodyPrimitive<ExperimentalWithCallbackMethod_RemoveBody<ExperimentalWithCallbackMethod_AddCamera<ExperimentalWithCallbackMethod_SetAmbientLight<ExperimentalWithCallbackMethod_AddPointLight<ExperimentalWithCallbackMethod_AddDirectionalLight<ExperimentalWithCallbackMethod_SetEntityOrder<ExperimentalWithCallbackMethod_UpdateRender<ExperimentalWithCallbackMethod_SetBaseColor<ExperimentalWithCallbackMethod_SetRoughness<ExperimentalWithCallbackMethod_SetSpecular<ExperimentalWithCallbackMethod_SetMetallic<ExperimentalWithCallbackMethod_SetUniqueId<ExperimentalWithCallbackMethod_SetSegmentationId<ExperimentalWithCallbackMethod_TakePicture<ExperimentalWithCallbackMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > CallbackService;
  #endif

  typedef ExperimentalWithCallbackMethod_CreateScene<ExperimentalWithCallbackMethod_RemoveScene<ExperimentalWithCallbackMethod_CreateMaterial<ExperimentalWithCallbackMethod_RemoveMaterial<ExperimentalWithCallbackMethod_AddBodyMesh<ExperimentalWithCallbackMethod_AddBodyPrimitive<ExperimentalWithCallbackMethod_RemoveBody<ExperimentalWithCallbackMethod_AddCamera<ExperimentalWithCallbackMethod_SetAmbientLight<ExperimentalWithCallbackMethod_AddPointLight<ExperimentalWithCallbackMethod_AddDirectionalLight<ExperimentalWithCallbackMethod_SetEntityOrder<ExperimentalWithCallbackMethod_UpdateRender<ExperimentalWithCallbackMethod_SetBaseColor<ExperimentalWithCallbackMethod_SetRoughness<ExperimentalWithCallbackMethod_SetSpecular<ExperimentalWithCallbackMethod_SetMetallic<ExperimentalWithCallbackMethod_SetUniqueId<ExperimentalWithCallbackMethod_SetSegmentationId<ExperimentalWithCallbackMethod_TakePicture<ExperimentalWithCallbackMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateScene() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveScene() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RemoveBody() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddCamera() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddPointLight() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateRender() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetRoughness() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSpecular() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMetallic() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUniqueId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetUniqueId() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_SetUniqueId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUniqueId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSegmentationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSegmentationId() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_SetSegmentationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSegmentationId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TakePicture() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateScene() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveScene() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveScene(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveMaterial(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyMesh(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddBodyPrimitive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RemoveBody() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRemoveBody(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddCamera() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddCamera(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAmbientLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddPointLight() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPointLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddDirectionalLight(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetEntityOrder(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateRender() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateRender(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetBaseColor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetRoughness() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetRoughness(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSpecular() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSpecular(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMetallic() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMetallic(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetUniqueId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetUniqueId() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_SetUniqueId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUniqueId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUniqueId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSegmentationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSegmentationId() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_SetSegmentationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSegmentationId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSegmentationId(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TakePicture() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTakePicture(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetCameraParameters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(0,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveScene() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(1,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveScene(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveScene(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveScene(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(2,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateMaterial(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* CreateMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* CreateMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveMaterial() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(3,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveMaterial(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveMaterial(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveMaterial(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddBodyMesh() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(4,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddBodyMesh(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddBodyMesh(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddBodyMesh(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddBodyPrimitive() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(5,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddBodyPrimitive(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddBodyPrimitive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddBodyPrimitive(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_RemoveBody() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(6,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RemoveBody(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* RemoveBody(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* RemoveBody(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddCamera() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(7,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddCamera(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddCamera(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddCamera(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetAmbientLight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(8,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAmbientLight(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetAmbientLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetAmbientLight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddPointLight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(9,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddPointLight(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddPointLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddPointLight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_AddDirectionalLight() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(10,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->AddDirectionalLight(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* AddDirectionalLight(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* AddDirectionalLight(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetEntityOrder() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(11,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetEntityOrder(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetEntityOrder(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetEntityOrder(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateRender() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(12,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateRender(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* UpdateRender(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* UpdateRender(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetBaseColor() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(13,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetBaseColor(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetBaseColor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetBaseColor(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetRoughness() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(14,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetRoughness(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetRoughness(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetRoughness(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSpecular() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(15,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSpecular(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSpecular(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSpecular(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetMetallic() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(16,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMetallic(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetMetallic(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetMetallic(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetUniqueId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetUniqueId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(17,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetUniqueId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetUniqueId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUniqueId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetUniqueId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetUniqueId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetSegmentationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetSegmentationId() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(18,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSegmentationId(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetSegmentationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSegmentationId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetSegmentationId(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetSegmentationId(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_TakePicture() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(19,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TakePicture(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* TakePicture(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* TakePicture(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    ExperimentalWithRawCallbackMethod_SetCameraParameters() {
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
      ::grpc::Service::
    #else
      ::grpc::Service::experimental().
    #endif
        MarkMethodRawCallback(20,
          new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
                   ::grpc::CallbackServerContext*
    #else
                   ::grpc::experimental::CallbackServerContext*
    #endif
                     context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetCameraParameters(context, request, response); }));
    }
    ~ExperimentalWithRawCallbackMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    #ifdef GRPC_CALLBACK_API_NONEXPERIMENTAL
    virtual ::grpc::ServerUnaryReactor* SetCameraParameters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #else
    virtual ::grpc::experimental::ServerUnaryReactor* SetCameraParameters(
      ::grpc::experimental::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)
    #endif
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateScene() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::Index, ::sapien::Renderer::server::proto::Id>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::Index, ::sapien::Renderer::server::proto::Id>* streamer) {
                       return this->StreamedCreateScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Index* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::Index,::sapien::Renderer::server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveScene : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveScene() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedRemoveScene(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveScene() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveScene(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveScene(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::Id,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateMaterial() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::Empty, ::sapien::Renderer::server::proto::Id>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::Empty, ::sapien::Renderer::server::proto::Id>* streamer) {
                       return this->StreamedCreateMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Empty* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::Empty,::sapien::Renderer::server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveMaterial : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveMaterial() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::Id, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedRemoveMaterial(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveMaterial() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveMaterial(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::Id* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveMaterial(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::Id,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddBodyMesh : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddBodyMesh() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::AddBodyMeshReq, ::sapien::Renderer::server::proto::Id>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::AddBodyMeshReq, ::sapien::Renderer::server::proto::Id>* streamer) {
                       return this->StreamedAddBodyMesh(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddBodyMesh() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddBodyMesh(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyMeshReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddBodyMesh(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::AddBodyMeshReq,::sapien::Renderer::server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddBodyPrimitive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddBodyPrimitive() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::AddBodyPrimitiveReq, ::sapien::Renderer::server::proto::Id>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::AddBodyPrimitiveReq, ::sapien::Renderer::server::proto::Id>* streamer) {
                       return this->StreamedAddBodyPrimitive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddBodyPrimitive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddBodyPrimitive(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddBodyPrimitiveReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddBodyPrimitive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::AddBodyPrimitiveReq,::sapien::Renderer::server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RemoveBody : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RemoveBody() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::RemoveBodyReq, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::RemoveBodyReq, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedRemoveBody(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RemoveBody() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RemoveBody(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::RemoveBodyReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRemoveBody(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::RemoveBodyReq,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddCamera : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddCamera() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::AddCameraReq, ::sapien::Renderer::server::proto::Id>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::AddCameraReq, ::sapien::Renderer::server::proto::Id>* streamer) {
                       return this->StreamedAddCamera(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddCamera() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddCamera(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddCameraReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddCamera(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::AddCameraReq,::sapien::Renderer::server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAmbientLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAmbientLight() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::IdVec3, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::IdVec3, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetAmbientLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAmbientLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAmbientLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec3* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAmbientLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::IdVec3,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPointLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddPointLight() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::AddPointLightReq, ::sapien::Renderer::server::proto::Id>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::AddPointLightReq, ::sapien::Renderer::server::proto::Id>* streamer) {
                       return this->StreamedAddPointLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddPointLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPointLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddPointLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPointLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::AddPointLightReq,::sapien::Renderer::server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddDirectionalLight : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_AddDirectionalLight() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::AddDirectionalLightReq, ::sapien::Renderer::server::proto::Id>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::AddDirectionalLightReq, ::sapien::Renderer::server::proto::Id>* streamer) {
                       return this->StreamedAddDirectionalLight(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_AddDirectionalLight() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddDirectionalLight(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::AddDirectionalLightReq* /*request*/, ::sapien::Renderer::server::proto::Id* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddDirectionalLight(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::AddDirectionalLightReq,::sapien::Renderer::server::proto::Id>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetEntityOrder : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetEntityOrder() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::EntityOrderReq, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::EntityOrderReq, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetEntityOrder(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetEntityOrder() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetEntityOrder(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::EntityOrderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetEntityOrder(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::EntityOrderReq,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateRender : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateRender() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::UpdateRenderReq, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::UpdateRenderReq, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedUpdateRender(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateRender() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateRender(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::UpdateRenderReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateRender(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::UpdateRenderReq,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetBaseColor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetBaseColor() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::IdVec4, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::IdVec4, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetBaseColor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetBaseColor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetBaseColor(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdVec4* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetBaseColor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::IdVec4,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetRoughness : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetRoughness() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetRoughness(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetRoughness() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetRoughness(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetRoughness(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::IdFloat,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSpecular : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSpecular() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetSpecular(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSpecular() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSpecular(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSpecular(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::IdFloat,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMetallic : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMetallic() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::IdFloat, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetMetallic(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMetallic() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMetallic(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::IdFloat* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMetallic(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::IdFloat,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetUniqueId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetUniqueId() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetUniqueId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetUniqueId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetUniqueId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetUniqueId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::BodyIdReq,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSegmentationId : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSegmentationId() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::BodyIdReq, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetSegmentationId(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSegmentationId() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSegmentationId(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::BodyIdReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSegmentationId(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::BodyIdReq,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TakePicture : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TakePicture() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::TakePictureReq, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::TakePictureReq, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedTakePicture(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TakePicture() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TakePicture(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::TakePictureReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTakePicture(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::TakePictureReq,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetCameraParameters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetCameraParameters() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::sapien::Renderer::server::proto::CameraParamsReq, ::sapien::Renderer::server::proto::Empty>(
            [this](::grpc_impl::ServerContext* context,
                   ::grpc_impl::ServerUnaryStreamer<
                     ::sapien::Renderer::server::proto::CameraParamsReq, ::sapien::Renderer::server::proto::Empty>* streamer) {
                       return this->StreamedSetCameraParameters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetCameraParameters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetCameraParameters(::grpc::ServerContext* /*context*/, const ::sapien::Renderer::server::proto::CameraParamsReq* /*request*/, ::sapien::Renderer::server::proto::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetCameraParameters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::sapien::Renderer::server::proto::CameraParamsReq,::sapien::Renderer::server::proto::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateScene<WithStreamedUnaryMethod_RemoveScene<WithStreamedUnaryMethod_CreateMaterial<WithStreamedUnaryMethod_RemoveMaterial<WithStreamedUnaryMethod_AddBodyMesh<WithStreamedUnaryMethod_AddBodyPrimitive<WithStreamedUnaryMethod_RemoveBody<WithStreamedUnaryMethod_AddCamera<WithStreamedUnaryMethod_SetAmbientLight<WithStreamedUnaryMethod_AddPointLight<WithStreamedUnaryMethod_AddDirectionalLight<WithStreamedUnaryMethod_SetEntityOrder<WithStreamedUnaryMethod_UpdateRender<WithStreamedUnaryMethod_SetBaseColor<WithStreamedUnaryMethod_SetRoughness<WithStreamedUnaryMethod_SetSpecular<WithStreamedUnaryMethod_SetMetallic<WithStreamedUnaryMethod_SetUniqueId<WithStreamedUnaryMethod_SetSegmentationId<WithStreamedUnaryMethod_TakePicture<WithStreamedUnaryMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateScene<WithStreamedUnaryMethod_RemoveScene<WithStreamedUnaryMethod_CreateMaterial<WithStreamedUnaryMethod_RemoveMaterial<WithStreamedUnaryMethod_AddBodyMesh<WithStreamedUnaryMethod_AddBodyPrimitive<WithStreamedUnaryMethod_RemoveBody<WithStreamedUnaryMethod_AddCamera<WithStreamedUnaryMethod_SetAmbientLight<WithStreamedUnaryMethod_AddPointLight<WithStreamedUnaryMethod_AddDirectionalLight<WithStreamedUnaryMethod_SetEntityOrder<WithStreamedUnaryMethod_UpdateRender<WithStreamedUnaryMethod_SetBaseColor<WithStreamedUnaryMethod_SetRoughness<WithStreamedUnaryMethod_SetSpecular<WithStreamedUnaryMethod_SetMetallic<WithStreamedUnaryMethod_SetUniqueId<WithStreamedUnaryMethod_SetSegmentationId<WithStreamedUnaryMethod_TakePicture<WithStreamedUnaryMethod_SetCameraParameters<Service > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace proto
}  // namespace server
}  // namespace Renderer
}  // namespace sapien


#endif  // GRPC_render_5fserver_2eproto__INCLUDED
